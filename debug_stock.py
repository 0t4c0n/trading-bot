# debug_stock.py
import yfinance as yf
import pandas as pd
import json
from pprint import pprint

# Importa la clase principal desde tu script original
from script_automated import MinerviniStockScreener

# --- CONFIGURACI√ìN ---
# ‚ñº‚ñº‚ñº ¬°AQU√ç ES DONDE PONES LA ACCI√ìN QUE QUIERES DEBUGEAR! ‚ñº‚ñº‚ñº
TICKER_TO_DEBUG = "ISSC"  # Cambia "NVDA" por el s√≠mbolo que quieras analizar
# Simula un RS Rating para el an√°lisis. Minervini requiere >= 70.
# Puedes cambiar este valor para ver c√≥mo afecta al resultado.
SIMULATED_RS_RATING = 85 
# --- FIN DE LA CONFIGURACI√ìN ---

def debug_single_stock(symbol, rs_rating):
    """
    Ejecuta el an√°lisis Minervini completo para una √∫nica acci√≥n y muestra los resultados detallados.
    """
    print(f"üïµÔ∏è  Iniciando debug para: {symbol}")
    print(f"üìä  Simulando un RS Rating de: {rs_rating} (el filtro requiere >= 70)")
    print("-" * 40)

    screener = MinerviniStockScreener()
    
    # 1. Descargar datos hist√≥ricos para la acci√≥n
    print(f"1. Descargando datos hist√≥ricos ('2y') para {symbol}...")
    try:
        # Usamos yf.Ticker para obtener los datos de una sola acci√≥n
        ticker_obj = yf.Ticker(symbol)
        hist_df = ticker_obj.history(period="2y", auto_adjust=True)
        
        if hist_df.empty or len(hist_df) < 252:
            print(f"‚ùå Error: No se pudieron descargar suficientes datos para {symbol}. Se necesitan al menos 252 d√≠as.")
            return
        print("‚úì Datos hist√≥ricos descargados.")
    except Exception as e:
        print(f"‚ùå Error al descargar datos hist√≥ricos: {e}")
        return

    # 2. Descargar informaci√≥n fundamental (.info)
    print(f"2. Descargando datos fundamentales (.info) para {symbol}...")
    try:
        ticker_info = ticker_obj.info
        if not ticker_info or 'sector' not in ticker_info:
             print(f"‚ùå Error: .info devuelto vac√≠o o incompleto para {symbol}.")
             # A√∫n as√≠ intentamos continuar, puede que algunos filtros fallen pero otros funcionen
             ticker_info = {}
        print("‚úì Datos fundamentales descargados.")
    except Exception as e:
        print(f"‚ùå Error al descargar .info: {e}")
        # Continuamos sin datos fundamentales para ver los filtros t√©cnicos
        ticker_info = {}

    # 3. Calcular Medias M√≥viles
    print("3. Calculando Medias M√≥viles (50, 150, 200)...")
    hist_with_ma = screener.calculate_moving_averages(hist_df)
    print("‚úì Medias M√≥viles calculadas.")

    # 4. Ejecutar el an√°lisis Minervini
    print("4. Ejecutando el an√°lisis completo de 11 filtros Minervini...")
    analysis_result = screener.get_minervini_analysis(
        df=hist_with_ma, 
        rs_rating=rs_rating, 
        ticker_info=ticker_info, 
        symbol=symbol
    )
    print("‚úì An√°lisis completado.")
    print("-" * 40)

    # 5. Mostrar los resultados de forma clara
    print(f"‚úÖ RESULTADOS DETALLADOS PARA: {TICKER_TO_DEBUG} ‚úÖ")
    print("-" * 40)

    if analysis_result is None:
        print("‚ÄºÔ∏è  ACCI√ìN DESCARTADA POR COMPLETO.")
        print("   Raz√≥n principal: Beneficios negativos o nulos. El script est√° configurado para ignorar estas acciones.")
        return

    # Usamos pprint para una visualizaci√≥n m√°s limpia del diccionario
    pprint(analysis_result)

    # Imprimir un resumen m√°s legible
    print("\n" + "-"*40)
    print("üîç RESUMEN DEL AN√ÅLISIS:")
    print(f"  - ¬øPasa TODOS los filtros?: {'S√ç' if analysis_result.get('passes_all_filters') else 'NO'}")
    print(f"  - Raz√≥n final del filtro: {analysis_result.get('filter_reasons', ['N/A'])[0]}")
    print(f"  - Stage Analysis: {analysis_result.get('stage_analysis', 'N/A')}")
    print(f"  - Minervini Score calculado: {analysis_result.get('minervini_score', 'N/A')}")
    print("-" * 40)
    print("\nüí° Para entender el resultado, revisa el diccionario de arriba.")
    print("   - 'passes_all_filters': te dice si pas√≥ todo.")
    print("   - 'filter_reasons': te da el motivo exacto por el que fue aceptada o rechazada.")
    print("   - Compara los valores de 'ma_50', 'ma_150', 'current_price', etc., con los criterios del README.")


if __name__ == "__main__":
    if not TICKER_TO_DEBUG or TICKER_TO_DEBUG == "TICKER_AQU√ç":
        print("Por favor, edita este script y cambia la variable 'TICKER_TO_DEBUG' por la acci√≥n que quieres analizar.")
    else:
        debug_single_stock(TICKER_TO_DEBUG, SIMULATED_RS_RATING)